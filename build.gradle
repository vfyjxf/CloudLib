plugins {
    id 'java-library'
    id 'eclipse'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.96'
    id "io.github.p03w.machete" version "2.+"
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
}

version = project.mod_version
group = project.maven_group

static def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

configurations {
    libraries {}
    implementation.extendsFrom libraries
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main

        if (isJetBrainsRuntime()) {
            jvmArgument "-XX:+AllowEnhancedClassRedefinition"
            jvmArgument "-XX:HotswapAgent=fatjar"
        }

        dependencies {
            runtime project.configurations.libraries
        }
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets {
    main {
        resources.srcDir 'src/generated/resources'
    }
}

repositories {
    mavenCentral()
    maven { url = "https://maven.quiltmc.org/repository/release/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://modmaven.dev" }
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://maven.shedaniel.me" }
    maven { url = "https://repo.kenzie.mx/releases" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url = 'https://thedarkcolour.github.io/KotlinForForge/' }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
    runtimeOnly "maven.modrinth:jei:${jei_version}-neoforge"
    implementation 'thedarkcolour:kotlinforforge-neoforge:4.10.0'
    libraries(jarJar("org.eclipse.collections:eclipse-collections-api:11.1.0")) {
        jarJar.ranged(it, "[11.1.0,)")
    }
    libraries(jarJar("org.eclipse.collections:eclipse-collections:11.1.0")) {
        jarJar.ranged(it, "[11.1.0,)")
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : mc_version, minecraft_version_range: mc_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_version: mod_version,
            jei_version         : jei_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    withSourcesJar()
}

tasks.jar.configure {
    archiveClassifier.set('slim')
}

tasks.jarJar.configure {
    archiveClassifier.set('')
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.maven_group
            artifactId = project.mod_id
            version = project.mod_version
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}