plugins {
    id "dev.architectury.loom" version "1.4-SNAPSHOT"
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "io.github.p03w.machete" version "2.+"
    id "maven-publish"
//    id "dev.vfyjxf.cyclone"
}
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

static def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

def generatedResources = file("src/generated")

sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

architectury {
    compileOnly()
    platformSetupLoomIde()
    forge()
}

loom {

    silentMojangMappingsLicense()
    forge {
        mixinConfigs = [
                "cloudlib.mixins.json"
        ]
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", "cloudlib"
            programArgs "--output", generatedResources.absolutePath
        }
    }

    if (isJetBrainsRuntime()) {
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition'
            }
        }
    }
    runConfigs.each { it.setIdeConfigGenerated(true) } // Uncomment this if run configs not generated
    addTaskBeforeRun(":${name}:classes")
}

repositories {
    mavenCentral()
    maven { url = "https://maven.quiltmc.org/repository/release/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://modmaven.dev" }
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://maven.shedaniel.me" }
    maven { url = "https://repo.kenzie.mx/releases" }
    maven { url = "https://maven.tterrag.com/" }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

configurations {
    shade.extendsFrom(implementation, forgeRuntimeLibrary)
    shadeMod.extendsFrom(shade, modImplementation)
}

dependencies {
    minecraft "com.mojang:minecraft:${project.mc_version}"

    mappings loom.layered() {
//        mappings("org.quiltmc:quilt-mappings:${mc_version}+${quilt_mappings}:intermediary-v2")
        parchment("org.parchmentmc.data:parchment-${mc_version}:${mapping_version}@zip")
        officialMojangMappings()
    }
    forge "net.minecraftforge:forge:${mc_version}-${forge_version}"

    modCompileOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"
    modRuntimeOnly "curse.maven:jei-238222:4712868"
    implementation "org.eclipse.collections:eclipse-collections-api:11.1.0"
    implementation "org.eclipse.collections:eclipse-collections:11.1.0"
    implementation "mx.kenzie:mirror:5.0.5"
    forgeRuntimeLibrary "org.eclipse.collections:eclipse-collections-api:11.1.0"
    forgeRuntimeLibrary "org.eclipse.collections:eclipse-collections:11.1.0"
    forgeRuntimeLibrary "mx.kenzie:mirror:5.0.5"
    include "org.eclipse.collections:eclipse-collections-api:11.1.0"
    include "org.eclipse.collections:eclipse-collections:11.1.0"
}

processResources {
    inputs.property "version", project.version
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release = 17
}
java {
    withSourcesJar()
}

build {
    dependsOn(publishToMavenLocal)
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.maven_group
            artifactId = project.archives_base_name
            version = project.mod_version
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}